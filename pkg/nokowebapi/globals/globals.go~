package globals

import (
	"nokowebapi/cores"
)

var DefaultConfig = cores.MapAny{
	"jwt": cores.MapAny{
		"algorithm": "HS256",
		"audience":  "your-audience",
		"issuer":    "your-issuer",
		"secretKey": "your-super-secret-key-keep-it-mind",
		"expiresIn": "1h",
	},
	"logger": cores.MapAny{
		"development":       true,
		"level":             "debug",
		"encoding":          "console",
		"stackTraceEnabled": true,
	},
}

type ConfigurationImpl interface {
	GetJwtConfig() *cores.JwtConfig
	GetLoggerConfig() *LoggerConfig
	Keys() []string
	Values() []any
	Get(key string) any
}

type Configuration struct {
	jwtConfig    *cores.JwtConfig
	loggerConfig *LoggerConfig
	locker       cores.LockerImpl
}

func NewConfiguration() ConfigurationImpl {
	return &Configuration{
		jwtConfig:    nil,
		loggerConfig: nil,
		locker:       cores.NewLocker(),
	}
}

func (c *Configuration) GetJwtConfig() *cores.JwtConfig {
	c.locker.Lock(func() {
		// pass as you go
		if c.jwtConfig == nil {
			c.jwtConfig = JwtConfigGlobals()
		}
	})
	return c.jwtConfig
}

func (c *Configuration) GetLoggerConfig() *LoggerConfig {
	c.locker.Lock(func() {
		// pass as you go
		if c.loggerConfig == nil {
			c.loggerConfig = LoggerConfigGlobals()
		}
	})
	return c.loggerConfig
}

func (c *Configuration) Keys() []string {
	return []string{
		cores.GetName(c.GetJwtConfig()),
		cores.GetName(c.GetLoggerConfig()),
	}
}

func (c *Configuration) Values() []any {
	return []any{
		c.GetJwtConfig(),
		c.GetLoggerConfig(),
	}
}

func (c *Configuration) Get(key string) any {
	keys := c.Keys()
	values := c.Values()

	// out of case
	if len(keys) != len(values) {
		panic("invalid configuration")
	}

	// search value by key
	for i, k := range keys {
		if k == key {
			return values[i]
		}
	}

	// not found
	return nil
}

var globals ConfigurationImpl
var locker = cores.NewLocker()

func Globals() ConfigurationImpl {
	locker.Lock(func() {
		if globals == nil {
			globals = NewConfiguration()
		}
	})
	return globals
}
